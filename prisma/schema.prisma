generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "member", "public", "temp_member"]
}

model Password {
  id         Int      @id @default(autoincrement())
  password   String   @db.VarChar(256)
  updateDate DateTime @default(now()) @map("update_date") @db.Timestamptz(6)
  member     Member?

  @@map("password")
  @@schema("auth")
}

model Provider {
  id           Int          @id @default(autoincrement())
  provider     ProviderType @default(LOCAL)
  member       Member?
  socialInfo   SocialInfo?  @relation(fields: [socialInfoId], references: [id], onDelete: Cascade)
  socialInfoId Int?         @unique @map("social_info_id")

  @@map("provider")
  @@schema("auth")
}

model SocialInfo {
  id       Int       @id @default(autoincrement())
  clientId String    @map("client_id") @db.VarChar(128)
  provider Provider?

  @@map("social_info")
  @@schema("auth")
}

model Member {
  id            Int         @id @default(autoincrement())
  uuidKey       String      @unique @default(dbgenerated("gen_random_uuid()")) @map("uuid_key") @db.Uuid
  email         String      @unique @db.VarChar(256)
  password      Password?   @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  passwordId    Int?        @unique @map("password_id")
  provider      Provider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId    Int         @unique @map("provider_id")
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     Int         @unique @map("profile_id")
  memberGrade   MemberGrade @relation(fields: [memberGradeId], references: [id], onDelete: Cascade)
  memberGradeId Int         @unique @map("member_grade_id")

  @@map("member")
  @@schema("member")
}

model Profile {
  id         Int      @id @default(autoincrement())
  nickname   String   @unique @db.VarChar(32)
  imageUrl   String?  @map("image_url") @db.VarChar(256)
  joinDate   DateTime @default(now()) @map("join_date") @db.Timestamptz(6)
  updateDate DateTime @default(now()) @map("update_date") @db.Timestamptz(6)
  member     Member?

  @@map("profile")
  @@schema("member")
}

model MemberGrade {
  id         Int       @id @default(autoincrement())
  updateDate DateTime? @default(now()) @map("update_date") @db.Timestamptz(6)
  grade      GradeType @default(NORMAL)
  member     Member?

  @@map("member_grade")
  @@schema("member")
}

model TempMember {
  id                  BigInt            @id @default(autoincrement())
  email               String            @unique @db.VarChar(256)
  nickname            String            @db.VarChar(32)
  password            String            @db.VarChar(256)
  createDate          DateTime          @default(now()) @map("create_date") @db.Timestamptz(6)
  expiryDate          DateTime          @default(now()) @map("expiry_date") @db.Timestamptz(6)
  emailVerification   EmailVerification @relation(fields: [emailVerificationId], references: [id], onDelete: Cascade)
  emailVerificationId BigInt            @unique @map("email_verification_id")

  @@map("temp_member")
  @@schema("temp_member")
}

model EmailVerification {
  id         BigInt      @id @default(autoincrement())
  code       String      @unique @db.Char(16)
  TempMember TempMember?

  @@map("email_verification")
  @@schema("temp_member")
}

enum ProviderType {
  LOCAL  @map("local")
  GOOGLE @map("google")

  @@map("provider_type")
  @@schema("public")
}

enum GradeType {
  ADMIN  @map("admin")
  NORMAL @map("normal")

  @@map("grade_type")
  @@schema("public")
}
